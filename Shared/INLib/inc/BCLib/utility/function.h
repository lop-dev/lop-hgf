//////////////////////////////////////////////////////////////////////
//  created:    2011/11/01
//  filename:   BCLib/utility/function.h
//  author:     League of Perfect
/// @brief
///
//////////////////////////////////////////////////////////////////////
#ifndef __BCLIB_UTILITY_FUNCTION_H__
#define __BCLIB_UTILITY_FUNCTION_H__

#include <BCLib/utility/baseDef.h>

#define BCLIB_UTILITY_FUNCTION_TEMPLATE_0 typename R=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_1 BCLIB_UTILITY_FUNCTION_TEMPLATE_0, typename T1=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_2 BCLIB_UTILITY_FUNCTION_TEMPLATE_1, typename T2=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_3 BCLIB_UTILITY_FUNCTION_TEMPLATE_2, typename T3=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_4 BCLIB_UTILITY_FUNCTION_TEMPLATE_3, typename T4=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_5 BCLIB_UTILITY_FUNCTION_TEMPLATE_4, typename T5=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_6 BCLIB_UTILITY_FUNCTION_TEMPLATE_5, typename T6=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_7 BCLIB_UTILITY_FUNCTION_TEMPLATE_6, typename T7=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_8 BCLIB_UTILITY_FUNCTION_TEMPLATE_7, typename T8=void
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_9 BCLIB_UTILITY_FUNCTION_TEMPLATE_8, typename T9=void

#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_0
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_1 T1 p1
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_2 BCLIB_UTILITY_FUNCTION_TYPE_PARA_1, T2 p2
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_3 BCLIB_UTILITY_FUNCTION_TYPE_PARA_2, T3 p3
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_4 BCLIB_UTILITY_FUNCTION_TYPE_PARA_3, T4 p4
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_5 BCLIB_UTILITY_FUNCTION_TYPE_PARA_4, T5 p5
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_6 BCLIB_UTILITY_FUNCTION_TYPE_PARA_5, T6 p6
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_7 BCLIB_UTILITY_FUNCTION_TYPE_PARA_6, T7 p7
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_8 BCLIB_UTILITY_FUNCTION_TYPE_PARA_7, T8 p8
#define BCLIB_UTILITY_FUNCTION_TYPE_PARA_9 BCLIB_UTILITY_FUNCTION_TYPE_PARA_8, T9 p9

#define BCLIB_UTILITY_FUNCTION_TYPE_0
#define BCLIB_UTILITY_FUNCTION_TYPE_1 T1
#define BCLIB_UTILITY_FUNCTION_TYPE_2 BCLIB_UTILITY_FUNCTION_TYPE_1, T2
#define BCLIB_UTILITY_FUNCTION_TYPE_3 BCLIB_UTILITY_FUNCTION_TYPE_2, T3
#define BCLIB_UTILITY_FUNCTION_TYPE_4 BCLIB_UTILITY_FUNCTION_TYPE_3, T4
#define BCLIB_UTILITY_FUNCTION_TYPE_5 BCLIB_UTILITY_FUNCTION_TYPE_4, T5
#define BCLIB_UTILITY_FUNCTION_TYPE_6 BCLIB_UTILITY_FUNCTION_TYPE_5, T6
#define BCLIB_UTILITY_FUNCTION_TYPE_7 BCLIB_UTILITY_FUNCTION_TYPE_6, T7
#define BCLIB_UTILITY_FUNCTION_TYPE_8 BCLIB_UTILITY_FUNCTION_TYPE_7, T8
#define BCLIB_UTILITY_FUNCTION_TYPE_9 BCLIB_UTILITY_FUNCTION_TYPE_8, T9

#define BCLIB_UTILITY_FUNCTION_PARA_0
#define BCLIB_UTILITY_FUNCTION_PARA_1 p1
#define BCLIB_UTILITY_FUNCTION_PARA_2 BCLIB_UTILITY_FUNCTION_PARA_1, p2
#define BCLIB_UTILITY_FUNCTION_PARA_3 BCLIB_UTILITY_FUNCTION_PARA_2, p3
#define BCLIB_UTILITY_FUNCTION_PARA_4 BCLIB_UTILITY_FUNCTION_PARA_3, p4
#define BCLIB_UTILITY_FUNCTION_PARA_5 BCLIB_UTILITY_FUNCTION_PARA_4, p5
#define BCLIB_UTILITY_FUNCTION_PARA_6 BCLIB_UTILITY_FUNCTION_PARA_5, p6
#define BCLIB_UTILITY_FUNCTION_PARA_7 BCLIB_UTILITY_FUNCTION_PARA_6, p7
#define BCLIB_UTILITY_FUNCTION_PARA_8 BCLIB_UTILITY_FUNCTION_PARA_7, p8
#define BCLIB_UTILITY_FUNCTION_PARA_9 BCLIB_UTILITY_FUNCTION_PARA_8, p9

#define BCLIB_UTILITY_FUNCTION(N)\
    template<BCLIB_UTILITY_FUNCTION_TEMPLATE_##N>\
    class CFunction\
    {\
    public:\
        typedef R(*FType)(BCLIB_UTILITY_FUNCTION_TYPE_##N);\
    protected:\
        CFunction() : m_fun(NULL) {}\
        virtual ~CFunction() {}\
    public:\
        CFunction(FType fun) : m_fun(fun) {}\
        CFunction(CFunction& obj) : m_fun(obj.m_fun) {}\
        CFunction& operator =(CFunction& obj)\
        {\
            m_fun = obj.m_fun;\
            return *this;\
        }\
        virtual R operator()(BCLIB_UTILITY_FUNCTION_TYPE_PARA_##N) const\
        {\
            return m_fun(BCLIB_UTILITY_FUNCTION_PARA_##N);\
        }\
        virtual CFunction* clone() const\
        {\
            return new CFunction(m_fun);\
        }\
        virtual bool isValid()const \
        {\
            return m_fun != NULL;\
        }\
    private:\
        FType m_fun;\
    };

#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_0    typename R
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_1    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_0, typename T1
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_2    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_1, typename T2
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_3    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_2, typename T3
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_4    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_3, typename T4
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_5    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_4, typename T5
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_6    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_5, typename T6
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_7    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_6, typename T7
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_8    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_7, typename T8
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_9    BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_8, typename T9

#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_0    R
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_1    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_0, T1
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_2    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_1, T2
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_3    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_2, T3
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_4    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_3, T4
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_5    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_4, T5
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_6    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_5, T6
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_7    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_6, T7
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_8    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_7, T8
#define BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_9    BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_8, T9

#define BCLIB_UTILITY_FUNCTION_SPECIAL(N)\
    template<BCLIB_UTILITY_FUNCTION_TEMPLATE_TYPE_##N>\
    class CFunction<BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>\
    {\
    public:\
        typedef R(*FType)(BCLIB_UTILITY_FUNCTION_TYPE_##N);\
    protected:\
        CFunction() : m_fun(NULL) {}\
    public:\
        virtual ~CFunction() {}\
        CFunction(FType fun) : m_fun(fun) {}\
        CFunction(CFunction& obj) : m_fun(obj.m_fun) {}\
        CFunction& operator =(CFunction& obj)\
        {\
            m_fun = obj.m_fun;\
            return *this;\
        }\
        virtual R operator()(BCLIB_UTILITY_FUNCTION_TYPE_PARA_##N) const\
        {\
            return m_fun(BCLIB_UTILITY_FUNCTION_PARA_##N);\
        }\
        virtual CFunction* clone() const\
        {\
            return new CFunction(m_fun);\
        }\
        virtual bool isValid()const \
        {\
            return m_fun != NULL;\
        }\
    private:\
        FType m_fun;\
    };

#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_0    typename R, typename C
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_1    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_0, typename T1=void
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_2    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_1, typename T2=void
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_3    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_2, typename T3=void
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_4    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_3, typename T4=void
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_5    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_4, typename T5=void
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_6    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_5, typename T6=void
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_7    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_6, typename T7=void
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_8    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_7, typename T8=void
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_9    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_8, typename T9=void

#define BCLIB_UTILITY_FUNCTION_OBJECT(N)\
    template<BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_##N>\
    class CFunctionObject : public CFunction<BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>\
    {\
    public:\
        typedef R(C::*FType)(BCLIB_UTILITY_FUNCTION_TYPE_##N);\
    public:\
        CFunctionObject() : m_fun(NULL), m_obj(NULL) {}\
        virtual ~CFunctionObject() {}\
        CFunctionObject(FType fun, C* obj) : m_fun(fun), m_obj(obj) {}\
        CFunctionObject(CFunctionObject& obj) : m_fun(obj.m_fun), m_obj(obj.m_obj) {}\
        CFunctionObject& operator =(CFunctionObject& obj)\
        {\
            m_fun = obj.m_fun;\
            m_obj = obj.m_obj;\
            return *this;\
        }\
        virtual R operator()(BCLIB_UTILITY_FUNCTION_TYPE_PARA_##N) const \
        {\
            return (*m_obj.*m_fun)(BCLIB_UTILITY_FUNCTION_PARA_##N);\
        }\
        virtual CFunction<BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>* clone() const\
        {\
            return new CFunctionObject(m_fun, m_obj);\
        }\
        virtual bool isValid() const\
        {\
            return m_fun != NULL && m_obj != NULL;\
        }\
    private:\
        FType m_fun;\
        C* m_obj;\
    };

#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_0    typename R, typename C
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_1    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_0, typename T1
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_2    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_1, typename T2
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_3    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_2, typename T3
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_4    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_3, typename T4
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_5    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_4, typename T5
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_6    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_5, typename T6
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_7    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_6, typename T7
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_8    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_7, typename T8
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_9    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_8, typename T9

#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_0    R, C
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_1    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_0, T1
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_2    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_1, T2
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_3    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_2, T3
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_4    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_3, T4
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_5    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_4, T5
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_6    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_5, T6
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_7    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_6, T7
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_8    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_7, T8
#define BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_9    BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_8, T9

#define BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(N)\
    template<BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_TYPE_##N>\
    class CFunctionObject<BCLIB_UTILITY_FUNCTION_OBJECT_TEMPLATE_PARA_##N> : public CFunction<BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>\
    {\
    public:\
        typedef R(C::*FType)(BCLIB_UTILITY_FUNCTION_TYPE_##N);\
    public:\
        CFunctionObject() : m_fun(NULL), m_obj(NULL) {}\
        CFunctionObject(FType fun, C* obj) : m_fun(fun), m_obj(obj) {}\
        CFunctionObject(CFunctionObject& obj) : m_fun(obj.m_fun), m_obj(obj.m_obj) {}\
        CFunctionObject& operator =(CFunctionObject& obj)\
        {\
            m_fun = obj.m_fun;\
            m_obj = obj.m_obj;\
            return *this;\
        }\
        virtual R operator()(BCLIB_UTILITY_FUNCTION_TYPE_PARA_##N) const\
        {\
            return (*m_obj.*m_fun)(BCLIB_UTILITY_FUNCTION_PARA_##N);\
        }\
        virtual CFunction<BCLIB_UTILITY_FUNCTION_TEMPLATE_PARA_##N>* clone() const\
        {\
            return new CFunctionObject(m_fun, m_obj);\
        }\
        virtual bool isValid() const\
        {\
            return m_fun != NULL && m_obj != NULL;\
        }\
    private:\
        FType m_fun;\
        C* m_obj;\
    };

namespace BCLib
{
namespace Utility
{

BCLIB_UTILITY_FUNCTION(9);

BCLIB_UTILITY_FUNCTION_SPECIAL(0);
BCLIB_UTILITY_FUNCTION_SPECIAL(1);
BCLIB_UTILITY_FUNCTION_SPECIAL(2);
BCLIB_UTILITY_FUNCTION_SPECIAL(3);
BCLIB_UTILITY_FUNCTION_SPECIAL(4);
BCLIB_UTILITY_FUNCTION_SPECIAL(5);
BCLIB_UTILITY_FUNCTION_SPECIAL(6);
BCLIB_UTILITY_FUNCTION_SPECIAL(7);
BCLIB_UTILITY_FUNCTION_SPECIAL(8);

BCLIB_UTILITY_FUNCTION_OBJECT(9);

BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(0);
BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(1);
BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(2);
BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(3);
BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(4);
BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(5);
BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(6);
BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(7);
BCLIB_UTILITY_FUNCTION_OBJECT_SPECIAL(8);

template <typename R, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> class CFunction;
template <typename R, typename C, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> class CFunctionObject;

}//Utility
}//BCLib

#endif//__BCLIB_UTILITY_FUNCTION_H__
